[
["intro.html", "Chapter 2 데이터 타입 및 데이터 구조 2.1 변수(Variable) 2.2 데이터 구조(Data Structure)", " Chapter 2 데이터 타입 및 데이터 구조 2.1 변수(Variable) 숫자, 문자, 범주, 논리, 날짜 등의 데이터 타입을 할당하고 관리 2.1.1 숫자(Numeric) 숫자 x1 &lt;- 13; x1; class(x1); str(x1) ## [1] 13 ## [1] &quot;numeric&quot; ## num 13 부동수 x2 &lt;- 12.3; x1; class(x2); str(x2) ## [1] 13 ## [1] &quot;numeric&quot; ## num 12.3 정수 x3 &lt;- 56L; x2; class(x3); str(x3) ## [1] 12.3 ## [1] &quot;integer&quot; ## int 56 2.1.2 문자() x1 &lt;- &quot;hellow world&quot;; class(x1); str(x1) ## [1] &quot;character&quot; ## chr &quot;hellow world&quot; 2.1.3 팩터 (factor) 팩터의 기본 사용법 sex = factor(&quot;male&quot;, c(&quot;male&quot;,&quot;female&quot;)); class(sex); str(sex); sex ## [1] &quot;factor&quot; ## Factor w/ 2 levels &quot;male&quot;,&quot;female&quot;: 1 ## [1] male ## Levels: male female 한번에 여려개의 팩터 할당 sex_family = factor(c(&quot;male&quot;,&quot;female&quot;,&quot;make&quot;), c(&quot;male&quot;, &quot;female&quot;)) sex_family ## [1] male female &lt;NA&gt; ## Levels: male female 팩터의 레벨 확인 nlevels(sex) ## [1] 2 levels(sex) ## [1] &quot;male&quot; &quot;female&quot; levels(sex)[1] ## [1] &quot;male&quot; levels(sex)[2] ## [1] &quot;female&quot; level 을 지정하지 않을 경우 자동 인지 auto_factor = factor(c(&quot;student&quot;,&quot;teacher&quot;,&quot;staff&quot;)) auto_factor ## [1] student teacher staff ## Levels: staff student teacher 2.1.4 논리형(Logical) x1 = TRUE &amp; TRUE; class(x1); str(x1); x1 ## [1] &quot;logical&quot; ## logi TRUE ## [1] TRUE x2 = TRUE &amp; FALSE; class(x2); str(x2); x2 ## [1] &quot;logical&quot; ## logi FALSE ## [1] FALSE X3 = T &amp; T; class(x2); str(x2); x2 ## [1] &quot;logical&quot; ## logi FALSE ## [1] FALSE 2.1.5 날짜타입(Date and Datetime) 2.2 데이터 구조(Data Structure) 2.2.1 벡터 (Vector) 벡터의 생성 (v1 &lt;- c(100,60,80,180)) ## [1] 100 60 80 180 (v2 &lt;- c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;,&quot;D&quot;)) ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; 벡터의 형변환 v1 &lt;- c(100,&quot;BAD&quot;,80,180) v1 ## [1] &quot;100&quot; &quot;BAD&quot; &quot;80&quot; &quot;180&quot; v1 &lt;- c(1,2,3,4.5) v1 ## [1] 1.0 2.0 3.0 4.5 백터에 이름 지정 names(v1) &lt;- c(&quot;jone&quot;,&quot;micheal&quot;,&quot;jane&quot;,&quot;jessica&quot;) v1 ## jone micheal jane jessica ## 1.0 2.0 3.0 4.5 벡터에 접근 및 조회 v1[1:3] ## jone micheal jane ## 1 2 3 v1[&quot;micheal&quot;] ## micheal ## 2 v1[-2] ## jone jane jessica ## 1.0 3.0 4.5 x &lt;- c (1,3) v1[x] ## jone jane ## 1 3 벡터의 길이 조회 nrow(v1) # 벡터는 지원하지 않음 ## NULL NROW(v1) # 벡터 뿐 아니라 데이터 프레임이나 리스트 모든곳에 사용 ## [1] 4 벡터의 연산 identical(c(1,2,3),c(1,2,3)) ## [1] TRUE identical(c(1,2,2),c(1,2,100)) ## [1] FALSE &quot;a&quot; %in% c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;) ## [1] TRUE &quot;d&quot; %in% c(&quot;a&quot;,&quot;b&quot;,&quot;c&quot;) ## [1] FALSE 벡터에 대한 스칼라 연산 x &lt;- c(1,2,3,4,5) y = x * 3 y ## [1] 3 6 9 12 15 벡터 합집합 x &lt;- c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;) y &lt;- c(&quot;C&quot;,&quot;D&quot;,&quot;E&quot;) z &lt;- union(x,y) z ## [1] &quot;A&quot; &quot;B&quot; &quot;C&quot; &quot;D&quot; &quot;E&quot; 벡터 교집합 z &lt;- intersect(x,y) z ## [1] &quot;C&quot; 벡터 차집합 z &lt;- setdiff(x,y) z ## [1] &quot;A&quot; &quot;B&quot; 벡터 비교 setequal(x,y) ## [1] FALSE 벡터 순차적 생성 x &lt;- seq(1,10) x ## [1] 1 2 3 4 5 6 7 8 9 10 x &lt;- seq(1,10,2) x ## [1] 1 3 5 7 9 입력 받은 배열 크기만큼 순차적 생성 x &lt;- c(10,20,30,40,50,60,70) y &lt;- seq_along(x) y ## [1] 1 2 3 4 5 6 7 y &lt;- 1:NROW(x) y ## [1] 1 2 3 4 5 6 7 일정한 구간을 반복해서 입력 x &lt;- rep(1:4, each=2) x ## [1] 1 1 2 2 3 3 4 4 x &lt;- rep(1:4, times=5) x ## [1] 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 1 2 3 4 x &lt;- rep(1:4, each=2, times=5) x ## [1] 1 1 2 2 3 3 4 4 1 1 2 2 3 3 4 4 1 1 2 2 3 3 4 4 1 1 2 2 3 3 4 4 1 1 2 ## [36] 2 3 3 4 4 2.2.2 리스트(List) 2.2.3 행렬(Matrix) 행렬 생성 matrix(c(1,2,3,4,5,6,7,8,9), nrow=3) #행수 지정 ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 matrix(c(1,2,3,4,5,6,7,8,9), ncol=3) #열수 지정 ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow=TRUE) #행우선 채우기 ## [,1] [,2] [,3] ## [1,] 1 2 3 ## [2,] 4 5 6 ## [3,] 7 8 9 matrix(c(1,2,3,4,5,6,7,8,9), nrow=3, byrow=FALSE) #열우선 채우기 ## [,1] [,2] [,3] ## [1,] 1 4 7 ## [2,] 2 5 8 ## [3,] 3 6 9 행과열의 차원 전체에 이름 동시 부여 #행렬생성과 동시에 이름 부여 matrix(1:9, nrow=3, dimnames = list(c(&quot;가&quot;,&quot;나&quot;,&quot;다&quot;), c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;))) ## A B C ## 가 1 4 7 ## 나 2 5 8 ## 다 3 6 9 #이미 만들어진 행렬에 이름 부여 x &lt;- matrix(1:9, ncol=3) dimnames(x) &lt;- list(c(&quot;가&quot;,&quot;나&quot;,&quot;다&quot;), c(&quot;A&quot;,&quot;B&quot;,&quot;C&quot;)) x ## A B C ## 가 1 4 7 ## 나 2 5 8 ## 다 3 6 9 행과 열을 따로 이름 부여 x &lt;- matrix(1:9, ncol=3) rownames(x) # 행이름이 없기 때문에 NULL 이 반환됨 ## NULL rownames(x) &lt;- c(&quot;x1&quot;,&quot;x2&quot;,&quot;x3&quot;) # 행에 이름 부여 x ## [,1] [,2] [,3] ## x1 1 4 7 ## x2 2 5 8 ## x3 3 6 9 colnames(x) &lt;- c(&quot;y1&quot;,&quot;y2&quot;,&quot;y3&quot;) # 열에 이름 부여 x ## y1 y2 y3 ## x1 1 4 7 ## x2 2 5 8 ## x3 3 6 9 2.2.4 데이타프레임(Data Frame) "]
]
